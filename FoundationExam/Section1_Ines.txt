#I wrote on this file with PyCharm. It may have different resolution if opened on txt directly.

Section 1

1.1 SDLC stands for Software Development Life Cycle. 

1.2 The exception is ZeroDivisionError.

1.3 The command is git push. 
For example to push the changes of my main local branch to the main remote branch I would
use git push origin main.

1.4 NULL represents the non-existence of a value of any data type in a database. 

1.5 A Scrum Master has responsibilities such as aiding and facilitating scrum rituals
(i.e. Sprint Planning, Sprint Retrospective, Sprint Review and Daily Scrums) and also
addresses and removes any obstacles that may affect the development team.

1.6 
a) A debugging tool used in class was the one integrated in our development environment on
PyCharm. If we realize that our code is not resulting as we expected, we can use this tool
to select a breakpoint in our code and then run through the code line by line (using the
"step over" button).
b) Another debugging tool learnt in class is a Python library named pdb. 
This tool is more simple that the first one, and we can also use it when our code is not
resulting as we expected, by setting manually a breakpoint in our code: pdb.set_trace().
This tool is very useful when we don't have access to an IDE such as pycharm but still
need to debug, and we can also use it in our command line/terminal.

1.7 This function would throw an error if the input parameters are not type numeric
(for example if price = "3", a string). To handle this case we should use try and except
where we would add in the except block a TypeError, for example:

class IncorrectInput(Exception):
    pass 


def can_pay(price, cash_given):
    try:
       if cash_given >= price:
         return True
       else:
         return False
    except TypeError:
       raise IncorrectInput("Input must be numeric")

1.8 Git branching is the creation and use of diverging branches from the main branch. For
example, for the group assignment we created a repository and in order to work on it, I
used git clone to clone the repository then I created my own local branch where I made
my changes, added, committed and pushed them to a new branch on remote. Afterwards I opened
a pull request on GitHub to merge the changes of this new branch to the main remote branch,
after confirming that there were no divergences. This way I could develop, make
experiments or fix errors on this new branch without impacting the main branch. In addition,
this a great way to work in a group since each member can create his/her own branch and
then merge with the main branch when finished.
After merging my pull request and finishing my changes I could delete the specific/new
branch that I created so that I can focus on the main branch. In conclusion, git branching
helps to organize and manage the work while also promoting the parallelization of
tasks/collaboration.

1.9 
a)
   i) We need a user interface where the employees or clients can register their orders.
In this system they must have the menu, prices, quantities and photos of the food.
Whoever uses this system must be able to eliminate, add more quantities and finalize
the order.
   ii) This interface must connect with the kitchen so that the chefs can check the orders
and staff can update its status.
   iii) The clients have the possibility to check the status of their order (the status
comes from the kitchen on ii) on the user interface.
   iv) This user interface must integrate secure transactions for clients' payments.
   v) The kitchen system must also receive online orders and update on its status.
   vi) For the online orders, the system must also integrate delivering services,
including the fee paid to these services.
   vii) Stock must be also taken into consideration, since when there are no ingredients
available, the respective food must not be clickable on the menu of the client interface.
The staff or chefs must be able to block a dish if it's not available which will not be
available in the client's interface or online orders.
   viii) Either staff or chefs must have an authentication in order to enter the kitchen
system or use advance tools on the client interface.
   ix) After paying the clients must have the option to provide feedback on the user
interface.
   x) The restaurant owners and staff must have access to the result of the analysis of
the data and feedback from the customers.
b)
   i) Making sure the user interface is updated real time when a dish is no longer
available. The same to online users.
   ii) Making sure the kitchen system receives the orders in real time and the customers
receive the status in real time as well.
   iii) Since the customer is able to make his/her own order it is crucial to have a
simple interface that is both user-friendly and provides a great customer experience.
   iv) Making sure that customers' payments are secure.
   v) Making sure that the customers' feedback and orders are incorporated in our data
analysis.
c)
   i) For the user interface I would use HTML, CSS and JavaScript since these are
friendly development languages and can provide a great experience. Since I want photos
of the food I would use Bootstrap as a framework.
   ii) For the backend such as the kitchen/staff system I would use Python since it is
also good for junior developers but can also provide a great experience. With Python we
would be able to manage the orders between customers/staff/kitchen.
To manage real time updates I would use real-time tools.
   iii) For the database I would use MySQL to keep track of the stock, orders, menus,
customers, payments, etc.
   iv) For the online orders and delivering services I would start with one and a well
known partner that provides the technology for online deliveries.
   v) For the payments I would use a well known payment gateway to secure the
clients/restaurant transactions.
   vi) For the dashboards with customers' reviews and analysis of the orders I would
use PowerBI.

   
   